# -*- coding: utf-8 -*-
"""YOLOv3 Custom Cable Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R0GrCPMVPvwYknAFvk_G8KtAAJAZLZxV

Stand: 07.04.2020

Autor: Thomas Bednarski
# Projekt: **YOLOv3 Custom Cable Detection**

Nutzung von Google Colaboratory (Colab) zur Anwendung von YOLOv3 Objekterkennung für Kabelenden:

>Crimp_Seal, 

>Crimp, 

>Isolation, 

>Stripped_Isolation.



Inhaltsverzeichnis:
1. Erste Schritte
2. Voreinstellungen (jedes Mal neu durchzuführen)
3. YOLOv3 Custom Cable Detection (Masterarbeit)
4. Eigenes Modell trainieren

# **1) Voreinstellungen Colab (einmalig)**
### Projekt in eigenes Google-Konto transferieren

> Voraussetzung: Eigenes Google Konto

Zur Nutzung und weiteren Bearbeitung von YOLOv3 Custom Cable Detection muss dieses Notebook in das eigene Google-Konto zu transferiert werden, um Google Drive (GDrive) als Speicherort zu nutzen. GDrive wird darauffolgendend als Speicherort von Bildern und Trainingsmaterial verwendet.
> 1. Klicke auf "Open in playground"
> 2. Klicke auf "Copy to Drive"


### GPU in Colab aktivieren
Der Hauptgrund zur Anwendung von YOLOv3 in Colab ist die Nutzung der GPU, die Google innerhalb eines Notebook-Projekts zur Verfügung stellt. Dieser Schritt muss nur einmalig getätigt werden.

>Die GPU lässt sich aktivieren in: **Edit > Notebook Settings**

>1. Runtime type: *Python 3*
>2. Hardware accelerator: *GPU*

Prüfe, ob die GPU von Colab genutzt wird. [Quelle (1. Setup)](https://github.com/robingenz/object-detection-yolov3-google-colab/blob/master/Object_Detection_YOLOv3_Google_Colab.ipynb)
"""

#import tensorflow as tf
#device_name = tf.test.gpu_device_name()
#if not '/device:GPU:0' in device_name:
#    print('\nFEHLER: Bitte wähle die GPU in Notebook Settings und starte erneut!')
#    exit
#else:
#    !nvidia-smi
#    print('OK')

"""# **2) Voreinstellungen Darknet (jedes Mal nach Neustart des Projekts durchzuführen)**
## GDrive mit Colab verknüpfen
Als Speicherort von Bildern und Trainingsmaterial eignet sich GDrive sehr gut, da Colab dort auf diese Bilder zugreifen sowie erstellte Bilderkennungen ablegen kann. Jedoch muss Colab zunächst berechtigt werden auf GDrive zugreifen zu dürfen.
> Klicke **STRG + F9**, um alle Codes in *2) Voreinstellungen* nacheinander auszuführen.

> Klicke auf erscheinenden Link, kopiere den Bestätigungscode in das Eingabefeld und bestätige mit Enter.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ..
from google.colab import drive
drive.mount('/content/gdrive')

"""Nachdem Colab Zugriff auf GDrive besitzt, werden Ordner erstellt, falls nicht bereits vorhanden."""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/My\ Drive
# %mkdir -p /content/gdrive/My\ Drive/yolocable/backup
# %mkdir -p /content/gdrive/My\ Drive/yolocable/detected_images
# %mkdir -p /content/gdrive/My\ Drive/yolocable/original_images
print('OK')

!ln -s /content/gdrive/My\ Drive/yolocable /gdriveyolo
!ls /gdriveyolo

"""### Konfiguration und Installation von Darknet

Die folgenden Codes installieren YOLOv3 innerhalb dieses Notebook-Projekts.
Zunächst wird Darknet heruntergeladen und danach im Makefile OPENCV und GPU für YOLOv3 aktiviert, indem die Zahl 0 durch 1 ersetzt wird. Diese Vorgehensweise ist identisch zur Eingabe über die Konsole beim Betriebssystem Linux auf dem Rechner. Im Gegensatz zum privaten Rechner, bei dem lediglich die CPU-Nutzung möglich war, ist nun die schnellere GPU-Leistung in Colab möglich. "!" und "%" markieren jeweils den Anfang der Codezeile äquivalent zur Linux-Konsole "$".
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content
!git clone https://github.com/pjreddie/darknet
#!git clone https://github.com/AlexeyAB/darknet
# %cd darknet
# %mkdir custom
!ln -s /content/darknet /dn

!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
print('OK')

"""Bevor die Anwendung begonnen werden kann, müssen vorher die relevanten Dateien aus Github nach Darknet mit folgendem Code kopiert werden."""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/
!git clone https://github.com/WellML/detectioncable
# %cd detectioncable

# Commented out IPython magic to ensure Python compatibility.
!mv cable.names /dn/custom/
!mv cable.data /dn/custom/
!mv yolov3_custom.cfg /dn/custom/
!mv darknet.py /dn/

!mv image.c /dn/src/

# %cd /gdriveyolo/
!cp cable.weights /dn/

"""Darknet wird installiert. Warnungen können ignoriert werden."""

# Commented out IPython magic to ensure Python compatibility.
# %cd /dn/
!make

"""Vergleich zu Linux:
Nachdem YOLOv3 über das Betriebssystem Linux ein Bild über die Konsole analysierte, wurden dort untereinander die Wahrscheinlichkeiten einer Klasse (bspw. Crimp) aufgelistet. Das Bild im jpg-Format mit den erkannten Klassen wurde im Ordner Darknet gespeichert. Dieses musste jedoch separat nach der Analyse geöffnet werden.

Die folgende Funktion "illustrate" wird genutzt, um nach der Analyse von YOLOv3 sofort das Bild anzeigen zu lassen. [Quelle (3. Test)](https://github.com/robingenz/object-detection-yolov3-google-colab/blob/master/Object_Detection_YOLOv3_Google_Colab.ipynb)
"""

# Commented out IPython magic to ensure Python compatibility.
def illustrate(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

"""### Test von Darknet und GPU
Nun werden Darknet und die GPU von Colab getestet. Dazu wird die vortrainierte Datei von YOLO **yolov3.weights** verwendet.
"""

#%cd /gdriveyolo
#!/bin/bash
#from pathlib import Path
#my_file = Path("/gdriveyolo/yolov3.weights")
#if not my_file.is_file():
#  !wget https://pjreddie.com/media/files/yolov3.weights
  
#!cp /gdriveyolo/yolov3.weights /dn
#print ('OK')

# Commented out IPython magic to ensure Python compatibility.
# %cd /dn
#!./darknet detect cfg/yolov3.cfg yolov3.weights data/person.jpg
#illustrate('predictions.jpg')
#!mv /dn/predictions.jpg /gdriveyolo/detected_images

"""Ein Bild mit einem Hund, Pferd und einer Person sollte zum Schluss erscheinen.

> Die GPU funktioniert, wenn die Detektionszeit Milli-Sekunden  statt >10 Sekunden benötigt.

Dieser Befehl stoppt den "Run all"-Befehl, indem eine Fehlermeldung angezeigt wird.
"""

stop run-all

"""# **3) YOLOv3 Custom Cable Detection**
Der Detektor kann nun gestartet werden.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /dn/
!./darknet detector test custom/cable.data custom/yolov3_custom.cfg cable.weights /gdriveyolo/original_images/bsp1.jpg -thresh 0.5
illustrate('predictions.jpg')
!mv /dn/predictions.jpg /gdriveyolo/detected_images

"""# **4) Eigenes Modell trainieren**
Im Folgenden werden die Schritte zum Trainieren der Custom Cable Detection erläutert. Insgesamt werden 6 Dateien generiert bzw. bearbeitet:

>1) train_dataset.rar (Fotos, Label, classes.txt)

>2) yolov3_custom.cfg

>3) cable.names

>4) cable.data

>5) train.txt

>6) test.txt

>7) darknet53.conv.74

## 1.1) Welche Dateien beinhaltet der Datensatz?
Der Datensatz beinhaltet

>mind. 100 Fotos pro Klasse (selbstaufgenommen oder Internet)

>zu den Fotos zugehörige Label als .txt-Datei

>Datei **classes.txt**

## 1.2) Fotoquelle
Es wurden eigene Fotos mit der Tiefenkamera **[** *Intel Realsense D415* **ändern zu Samsung S10]** aufgenommen.

## 1.3) Gerenieren von Klassen "**classes.txt**"
Es wurde eine neue Textdatei erstellt mit dem Namen "**classes.txt**". In diesem Projekt lauten die Namen aller Klassen:

> USBTypA

> Crimp

>Isolation

>StrippedIsolation

## 1.4) Datensatz labeln
Das Labeln des Datensatzes erfolgte durch [labelImg](https://github.com/tzutalin/labelImg). In diesem Programm werden die zu erkennenden Objekte markiert. Dabei erstellt labelImg Textdateien, die im gleichen Bilder-Verzeichnis zu finden sein sollten.

*labelImg wurde auf Ubuntu 18.04 lokal installiert und durchgeführt:*

1) Download und extrahiere zu "Home"
https://github.com/tzutalin/labelImg

2) Eingabe in Ubuntu-Konsole:
> cd ~

> cd labelImg-master

> sudo apt-get install pyqt5-dev-tools

> sudo pip3 install -r requirements/requirements-linux-python3.txt

> make qt5py3

3) Die selbsterstellte Datei **classes.txt** in den Ordner mit den Fotos einfügen.

4) Eingabe in Konsole:
> python3 labelImg.py

labelImg öffnet sich nun.

5) In "Open Dir" das Verzeichnis auswählen, indem die selbstaufgenomenen Fotos gespeichert sind.

6) In "Change Save Dir" sicherstellen, dass das selbe Verzeichnis gewählt ist.

7) Auf "**Pascal VOC**" (.xml) klicken, um auf "**YOLO**" (.txt) Output umzustellen.

8) Taste "**W**" wechselt den Zeiger-Cursor zu einem Fadenkreuz-Cursor

9) Bereich wählen, das durch YOLOv3 später erkannt werden soll.

10) Eine der vorher definierten Klassen auswählen (siehe Generieren von Klassen).

11) "**Strg + S**" speichert das gewählte Fenster in für YOLOv3 lesbare Werte.
Beispiel Dateiinhalt Foto1.txt:

**0 0.48 0.50 0.13 0.44**

>Klasse = 0 (1. Klasse)

>X_Min = 0.48 

>X_Max = 0.50

>Y_Min = 0.13

>Y_Max = 0.44


12) Taste "**D**" wechselt zum nächsten Foto (Taste "A" zum vorherigen Foto).

## 1.5) Datensatz auf GDrive hochladen
In diesem Schritt wird der Datensatz bestehend aus Fotos, Label, classes.txt in einem Ordner mit dem Namen "**train_dataset.rar**" in das GDrive Verzeichnis "yolocable" manuell hochgeladen. Eine RAR-Datei verbraucht weniger Speicherplatz und kann schneller hochgeladen werden.

>Gehe zu https://drive.google.com/drive/u/0/my-drive

>Öffne dort den Ordner "**yolocable**"

>Lade **train_dataset.rar** in das Verzeichnis "yolocable" hoch.

>Prüfen, ob sich die RAR-Datei im Pfad befindet.
"""

!ls /gdriveyolo

"""Führe folgenden Code aus, um die RAR-Datei zu entpacken und zu Darknet zu kopieren."""

# Commented out IPython magic to ensure Python compatibility.
# %cd /gdriveyolo
from pathlib import Path
my_file = Path("/gdriveyolo/train_dataset.rar")
if my_file.is_file():
  get_ipython().system_raw("unrar x train_dataset.rar")
  !rm train_dataset.rar
!mv train_dataset /dn/custom
print ('OK')

!ls /dn/custom

"""## 2.1) yolov3_custom.cfg
Fall 1: yolov3_custom.cfg in Gdrive **nicht vorhanden**.

>Starte *CFG-Datei Download*. Der Code lädt eine bearbeitbare yolov3_custom.txt herunter. Nehme in dieser Textdatei **Änderungen** vor, die im Folgenden erkläutert werden.

Fall 2: yolov3_custom.cfg in Gdrive **bereits vorhanden**, jedoch möchte ich diese Datei **nicht** für das das Training verwenden.

>Entferne diese Version aus Gdrive durch folgenden Code und starte *CFG-Datei Download*.
"""

#Fall 2
!rm /gdriveyolo/yolov3_custom.cfg"

"""Fall 3: yolov3_custom.cfg in Gdrive **bereits vorhanden**. Diese möchte ich für das Training verwenden.

>*Starte dennoch *CFG-Datei Download* und gehe direkt zu 2.2)
"""

# Commented out IPython magic to ensure Python compatibility.
#CFG-Datei Download
#Fall 1, Fall 2, Fall 3
# %cd /gdriveyolo/

def download(path):
  from google.colab import files
  files.download(path)

from pathlib import Path
my_file = Path("/gdriveyolo/yolov3_custom.cfg")
if not my_file.is_file():
  !cp /dn/cfg/yolov3.cfg /gdriveyolo/yolov3_custom.txt
  download('yolov3_custom.txt')
  !rm yolov3_custom.txt
print ('OK')

"""Folgende Änderungen müssen in der Datei **yolov3_custom.txt** vorgenommen werden:

>In Zeile 3 und 4 das **#** vorne hinzufügen (auskommentieren)

>batch=64

>subdivisions=16

>max_batches = [Anzahl der Klassen x 2000; hier: **max_batches = 8000**}

>steps=[max_batches x 80%, x 90%; hier: **steps=6400,7200** ]

**3x in [yolo]:**

> classes=4

> random = 1, außer 1x random = 0, um die Trainingsgeschwindigkeit bei geringfügiger Minderung der Detektionsqualität zu erhöhen.

> num=9

**3x in [convolutional] (jeweils direkt über [yolo]):**

>filters=[ (num/3) * (classes + 5); hier: **filters=27** ]

> Datei speichern (STRG + S)  und schließen.

##2.2) Kopieren der CFG-Datei zu Darknet
Für Fall 1 und Fall 2 wird ein Uploadfenster geöffnet. Folgender Code kann als Upload nutzen. Dieser Code konvertiert die TXT-Datei zurück in eine CFG-Datei. Danach wird die CFG-Datei zu Darknet kopiert.

>Führe folgenden Code aus.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /gdriveyolo/

def upload():
  from google.colab import files
  uploaded = files.upload() 
  for name, data in uploaded.items():
    with open(name, 'wb') as f:
      f.write(data)
      print ('saved file', name)

from pathlib import Path
my_file1 = Path("/gdriveyolo/yolov3_custom.txt")
my_file2 = Path("/gdriveyolo/yolov3_custom.cfg")
if my_file1.is_file():
  !mv yolov3_custom.txt yolov3_custom.cfg
elif not my_file2.is_file():
  #Upload yolov3_custom.txt
  upload()
  !mv yolov3_custom.txt yolov3_custom.cfg  
!cp /gdriveyolo/yolov3_custom.cfg /dn/custom
print ('OK')

!ls /dn/custom

"""## 3) cable.names Datei

Folgenden Code ausführen, um cable.names zu erstellen.

>Voraussetzung: Die Datei **classes.txt** muss weiterhin im Verzeichnis **train_dataset** aus der RAR-Datei vorhanden sein.
"""

!cp /dn/custom/train_dataset/classes.txt /gdriveyolo/cable.names
!cp /gdriveyolo/cable.names /dn/custom
print('OK')

!ls /dn/custom

"""## 4) cable.data Datei
>Passe die Anzahl der Klassen im folgenden Code in Zeile 7 an und führe ihn aus.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /gdriveyolo/

from pathlib import Path
my_file = Path("/gdriveyolo/cable.data")
if not my_file.is_file():
  data = open('data.txt','w')
  data.write("\r\nclasses = 4")
  data.write("\r\ntrain = custom/train.txt")
  data.write("\r\nvalid = custom/test.txt")
  data.write("\r\nnames = custom/cable.names")
  data.write("\r\nbackup = /gdriveyolo/backup/")
  data.close()
  !mv data.txt cable.data
!cp /gdriveyolo/cable.data /dn/custom
print ('OK')

!ls /dn/custom

"""## 5) train.txt
train.txt ist folgendermaßen aufgebaut:

**custom/train_dataset/**Bildname

>Stelle sicher, dass das Bildformat in Zeile 7 stimmt und führe folgenden Code aus. Alle Bilder müssen das selbe Format haben.
"""

# Commented out IPython magic to ensure Python compatibility.
import os
# %cd /dn/

image_files = []
os.chdir(os.path.join("custom", "train_dataset"))
for filename in os.listdir(os.getcwd()):
   if filename.endswith(".png"):
       image_files.append("custom/train_dataset/" + filename)
os.chdir("..")
with open("train.txt", "w") as outfile:
    for image in image_files:
        outfile.write(image)
        outfile.write("\n")
    outfile.close()
os.chdir("..")

print('OK')

!ls /dn/custom

"""##6) test.txt
In Test.txt sollen 10-20% der Trainingsbilder zugeordnet sein.

> Führe folgenden Code aus. Dabei werden train.txt sowie test.txt lokal auf den Rechner heruntergeladen und auf Darknet gelöscht.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /dn/custom/

#train.txt
download('train.txt')
!rm train.txt
print('OK')

test = open('test.txt','w')
test.close()
#test.txt
download('test.txt')
!rm test.txt
print('OK')

""">Schneide 10-20% der Zeilen aus train.txt heraus und füge diese Zeilen in test.txt manuell ein.

> Zuerst **train.txt**, danach **test.txt** über folgende Uploadfunktion im Code hochladen.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /gdriveyolo/

def upload():
  from google.colab import files
  uploaded = files.upload() 
  for name, data in uploaded.items():
    with open(name, 'wb') as f:
      f.write(data)
      print ('saved file', name)

from pathlib import Path
my_file = Path("/gdriveyolo/train.txt")
if not my_file.is_file():
  #train.txt hochladen
  upload()
my_file = Path("/gdriveyolo/test.txt")
if not my_file.is_file():
  #test.txt hochladen
  upload()
!cp test.txt /dn/custom/
!cp train.txt /dn/custom/
print('OK')

from pathlib import Path
my_file = Path("/gdriveyolo/test.txt")
if not my_file.is_file():
  #test.txt hochladen
  upload()
!cp test.txt /dn/custom/
print('OK')

"""##**Zusammenfassung custom/dn**
Unter folgendem Code sollten nun 6 Elemente eingeblendet werden.
"""

!ls /dn/custom

"""##7) Vortrainierte Weights für Convolutional Layers
Die Weights-Datei von der Pjreddie Webseite hilft dabei das Training der benutzerdefinierten Objekterkennung zu beschleunigen.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /gdriveyolo
#!/bin/bash
from pathlib import Path
my_file = Path("/gdriveyolo/darknet53.conv.74")
if not my_file.is_file():
  !wget http://pjreddie.com/media/files/darknet53.conv.74
!cp /gdriveyolo/darknet53.conv.74 /dn
print('OK')

"""darknet53.conv.74 sollte nun unter folgendem Code zu finden sein."""

!ls /dn/

"""## **Pre-Training**

Damit Colab in dieser langen Trainingszeit nicht automatisch die Verbindung trennt, kann dem Browser vorgegaukelt werden, dass jede 10 Sekunden ein Mausklick durchgeführt wird. [Quelle](https://medium.com/@shivamrawat_756/how-to-prevent-google-colab-from-disconnecting-717b88a128c0)

>Drücke **STRG + SHIFT + i**.

>Gebe folgenden Code im Tab "**Console**" ein.

```
function ClickConnect(){
console.log("Working"); 
document.querySelector("colab-toolbar-button#connect").click() 
}
setInterval(ClickConnect,60000)
```

>Klicke **Enter**. (Das Fenster offen lassen)

Eine beliebige Zahl erscheint als Output. Darunter folgt nach einiger Zeit **Working** und einer Zahl davor, die von 1 aufwärts zählt. Damit wird verhindert, dass Colab die Verbindung aufgrund von Inaktivität trennt.

##**Training**

Nun beginnt das Training mit folgendem Code. Dieser Vorgang dauert mehrere Stunden
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /dn
!./darknet detector train custom/cable.data custom/yolov3_custom.cfg darknet53.conv.74 -dont_show

"""> Für eine hohe Genauigkeit kann der Trainingsprozess bei unter 2,0 "avg loss" gestoppt werden. Die Datei speichert sich automatisch nach jeden 100 Iterationen (ca. jede 5 Minuten).

>Falls der Prozess unbeabsichtigt vorher abbricht, ist der bisherige Fortschritt in GDrive gespeichert unter yolocable/backup.

Nach dem Training kann der durchschnittliche Verlust (avg loss) gegenüber den Iterationen über das Diagramm **chart.png** analysiert werden.
"""

illustrate('chart.png')

"""##**Post-Training**"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /gdriveyolo/
!sed -i 's/batch=64/batch=1/' yolov3_custom.cfg
!sed -i 's/subdivisions=16/subdivisions=1/' yolov3_custom.cfg

"""#**Anwendung**"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /dn/
!./darknet detector test /gdriveyolo/cable.data /gdriveyolo/yolov3_custom.cfg /gdriveyolo/backup/yolov3_custom_last.weights /gdriveyolo/original_images/A_01_Color.png -thresh 0.3
illustrate('predictions.jpg')